d_geo %>%
filter(year == "2018") %>%
mutate(ln_gdp_q = cut(ln_gdp, breaks = quantile(ln_gdp, probs = seq(0, 1, by = 1/6)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = ln_gdp_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
length(unique(shapefile$ARS))
shapefile
d_geo <- merge(shapefile, d, by.x = "ARS", by.y = "code_num", all.y = TRUE)
d_geo %>%
filter(year == "2018") %>%
mutate(ln_gdp_q = cut(ln_gdp, breaks = quantile(ln_gdp, probs = seq(0, 1, by = 1/6)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = ln_gdp_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
# GLMM
f1 <- d_employed ~ 1 + (1 | spatial_unit) + unemployment_rate +
sc_land_price + prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed
m1 <- brm(f1, data = d, family = gaussian(), cores = 4)
summary(m1)
d_employed
d$d_employed
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
# Impute data
imputed <- mice(d, method="cart")
d <- complete(imputed)
anyNA(d)
# transform some variables
d <- d %>% mutate(ln_gdp = log(gdp),
sc_land_price = land_price / 1000,
sc_waste_amount = waste_amount / 10000,
year = as.factor(year),
spatial_unit = as.factor(spatial_unit)) %>% as_tibble()
# Visualisation
d %>%
select("d_employed", "unemployment_rate", "sc_land_price",
"prop_foreigners", "sc_waste_amount", "ln_gdp", "hospital_bed") %>%
tidyr::gather(key = "variable", value = "value") %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~variable, scale = "free") +
labs(x = "", y = "", title = "", subtitle = "") +
theme(legend.position = "none")
## with shape data
shapefile <- st_read("vg2500_krs/vg2500_krs.shp")
shapefile$ARS <- as.numeric(shapefile$ARS)
d_geo <- merge(shapefile, d, by.x = "ARS", by.y = "code_num", all.y = TRUE)
d_geo %>%
filter(year == "2018") %>%
mutate(ln_gdp_q = cut(ln_gdp, breaks = quantile(ln_gdp, probs = seq(0, 1, by = 1/6)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = ln_gdp_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
# GLMM
f1 <- d_employed ~ 1 + (1 | spatial_unit) + unemployment_rate +
sc_land_price + prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed
m1 <- brm(f1, data = d, family = gaussian(), cores = 4)
# GLMM
f2 <- d_employed ~ 1 + (1 | spatial_unit) + (1 | year) + unemployment_rate +
sc_land_price + prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed
## create adjacency matrix
W <- nb2mat(poly2nb(shapefile), style = "B")
summary(m1)
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(shapefile), style = "B")
W
shapefile
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(d_geo), style = "B")
W
d_geo
d_geo[1:9]
d_geo[1:10]
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(d_geo[1:10]), style = "B")
W
shapefile
d_geo[1:10]
d_geo[1:9]
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(d_geo[1:9]), style = "B")
W
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(shapefile), style = "B")
W
dim(W)
poly2nb(d_geo[,0:9])
d_geo[,0:9]
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(d_geo[,0:9]), style = "B")
W
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(shapefile), style = "B")
W
shapefile
d_geo[, 1:9]
d_geo
d_geo[c(2, 3, 1, 4, 5, 6, 7, 8, 9)]
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(d_geo[c(2, 3, 1, 4, 5, 6, 7, 8, 9)]), style = "B")
W
d_geo[c(2, 3, 1, 4, 5, 6, 7, 8, 9)]
shapefile
d_geo[c(2, 3, 1, 4, 5, 6, 7, 8, 9)]
shapefile
unique(shapefile$ARS) - unique(d$code_num)
unique(shapefile$ARS)
setdiff(unique(shapefile$ARS), unique(d$code_num))
shapefile <- shapefile %>% filter(ARS == 16056)
shapefile
## with shape data
shapefile <- st_read("vg2500_krs/vg2500_krs.shp")
shapefile$ARS <- as.numeric(shapefile$ARS)
d_geo <- merge(shapefile, d, by.x = "ARS", by.y = "code_num", all.y = TRUE)
d_geo %>%
filter(year == "2018") %>%
mutate(ln_gdp_q = cut(ln_gdp, breaks = quantile(ln_gdp, probs = seq(0, 1, by = 1/6)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = ln_gdp_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
setdiff(unique(shapefile$ARS), unique(d$code_num))
shapefile <- shapefile %>% filter(ARS != 16056)
shapefile
# delete row in shapefile which is not recorded in main data
setdiff(unique(shapefile$ARS), unique(d$code_num))
# GLMM with spatial conditional autoregressive model (CAR)
## create adjacency matrix
W <- nb2mat(poly2nb(shapefile), style = "B")
W
f2 <- net_migration ~ 1 + (1 | spatial_unit) + unemployment_rate + sc_land_price +
ln_living_space + prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed + car(W)
f2 <- net_migration ~ 1 + (1 | spatial_unit) + unemployment_rate + sc_land_price +
ln_living_space + prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed +
car(W, gr = spatial_unit)
m2 <- brm(f2, data = d, data2 = list(W = W), family = gaussian(), cores = 4)
f2 <- d_employed ~ 1 + (1 | spatial_unit) + unemployment_rate + sc_land_price +
prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed +
car(W, gr = spatial_unit)
m2 <- brm(f2, data = d, data2 = list(W = W), family = gaussian(), cores = 4)
d <- merge(shapefile, d, by.x = "ARS", by.y = "code_num", all.y = TRUE)
d %>%
filter(year == "2018") %>%
mutate(ln_gdp_q = cut(ln_gdp, breaks = quantile(ln_gdp, probs = seq(0, 1, by = 1/6)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = ln_gdp_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
# delete row in shapefile which is not recorded in main data
setdiff(unique(shapefile$ARS), unique(d$code_num))
shapefile <- shapefile %>% filter(ARS != 16056)
rownames(W)
rownames(W) <- d$ARS
rownames(W) <- shapefile$ARS
rownames(W)
shapefile$ARS
shapefile$ARS
f2 <- d_employed ~ 1 + (1 | ARS) + unemployment_rate + sc_land_price +
prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed +
car(W, gr = as.factor(shapefile$ARS))
m2 <- brm(f2, data = d, data2 = list(W = W), family = gaussian(), cores = 4)
as.factor(shapefile$ARS)
f2 <- d_employed ~ 1 + (1 | ARS) + unemployment_rate + sc_land_price +
prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed +
car(W, gr = as.factor(str(shapefile$ARS)))
m2 <- brm(f2, data = d, data2 = list(W = W), family = gaussian(), cores = 4)
as.factor(str(shapefile$ARS))
str(shapefile$ARS)
shapefile$ARS
toString(shapefile$ARS)
f2 <- d_employed ~ 1 + (1 | ARS) + unemployment_rate + sc_land_price +
prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed +
car(W, gr = toString(shapefile$ARS))
m2 <- brm(f2, data = d, data2 = list(W = W), family = gaussian(), cores = 4)
f2 <- d_employed ~ 1 + unemployment_rate + sc_land_price +
prop_foreigners + sc_waste_amount + ln_gdp + hospital_bed +
car(W, gr = toString(shapefile$ARS))
m2 <- brm(f2, data = d, data2 = list(W = W), family = gaussian(), cores = 4)
"s:" + toString(shapefile$ARS)
paste("s:", toString(shapefile$ARS))
paste("s:", toString(shapefile$ARS), sep = "")
paste("s:", shapefile$ARS, sep = "")
library(plm)
install.pacakges("plm"
)
install.packages("plm")
head(d)
theme_set(theme_minimal())
d_wide <- read.csv("inkar/data.csv")
# Data pre-processing
col_eng <- c("code_num", "spatial_unit", "year", "employed", "unemployment_rate",
"land_price", "employees_academic_degree", "employees_no_qualification",
"hospital_bed", "prop_foreigners", "waste_amount", "gdp")
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
# Impute data
imputed <- mice(d, method="cart")
d <- complete(imputed)
library(tidyr)
library(dplyr)
library(mice)
library(ggplot2)
library(plm)
library(sf)
library(spdep)
library(sf)
library(viridis)
theme_set(theme_minimal())
d_wide <- read.csv("inkar/data.csv")
# Data pre-processing
col_eng <- c("code_num", "spatial_unit", "year", "employed", "unemployment_rate",
"land_price", "employees_academic_degree", "employees_no_qualification",
"hospital_bed", "prop_foreigners", "waste_amount", "gdp")
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
# Impute data
imputed <- mice(d, method="cart")
d <- complete(imputed)
anyNA(d)
# transform some variables
d <- d %>% mutate(ln_gdp = log(gdp),
sc_land_price = land_price / 1000,
sc_waste_amount = waste_amount / 10000,
year = as.factor(year),
spatial_unit = as.factor(spatial_unit)) %>% as_tibble()
# Visualisation
d %>%
select("d_employed", "unemployment_rate", "sc_land_price",
"prop_foreigners", "sc_waste_amount", "ln_gdp", "hospital_bed") %>%
tidyr::gather(key = "variable", value = "value") %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~variable, scale = "free") +
labs(x = "", y = "", title = "", subtitle = "") +
theme(legend.position = "none")
## with shape data
shapefile <- st_read("vg2500_krs/vg2500_krs.shp")
shapefile$ARS <- as.numeric(shapefile$ARS)
d <- merge(shapefile, d, by.x = "ARS", by.y = "code_num", all.y = TRUE)
d %>%
filter(year == "2021") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = c(0, 0.10, 0.20, 0.7, 0.75, 1)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
d %>%
filter(year == "2016") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = c(0, 0.10, 0.20, 0.7, 0.75, 1)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
d %>%
filter(year == "2021") %>%
select("d_employed") %>%
ggplot(aes(x = d_employed)) +
geom_density(alpha = 0.5)
d1 <- d %>%
filter(year == "2016") %>%
select("d_employed")
quantile(d1$d_employed, c(0, 0.20, 0.5, 0.8, 1))
d %>%
filter(year == "2020") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = seq(0, 1, by = 1/6)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
# delete row in shapefile which is not recorded in main data
setdiff(unique(shapefile$ARS), unique(d$code_num))
shapefile <- shapefile %>% filter(ARS != 16056)
d
d$d_employed
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
d$d_employed
d_wide <- read.csv("inkar/data.csv")
# Data pre-processing
col_eng <- c("code_num", "spatial_unit", "year", "employed", "unemployment_rate",
"land_price", "employees_academic_degree", "employees_no_qualification",
"hospital_bed", "prop_foreigners", "waste_amount", "gdp")
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
hist(d$d_employed)
d %>%
filter(year == "2021") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = c(0, 0.10, 0.20, 0.7, 0.75, 1)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
d %>%
filter(year == "2021") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = c(0, 0.10, 0.20, 0.7, 0.75, 1)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
d %>%
filter(year == "2021") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = c(0, 0.10, 0.20, 0.7, 0.75, 1)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
d %>%
filter(year == "2016") %>%
mutate(d_employed_q = cut(d_employed, breaks = quantile(d_employed, probs = c(0, 0.10, 0.20, 0.7, 0.75, 1)),
include.lowest = TRUE)) %>%
ggplot() +
geom_sf(aes(fill = d_employed_q)) +
scale_fill_viridis_d(option = "magma", direction = -1)
d_wide <- read.csv("inkar/data.csv")
# Data pre-processing
col_eng <- c("code_num", "spatial_unit", "year", "employed", "unemployment_rate",
"land_price", "employees_academic_degree", "employees_no_qualification",
"hospital_bed", "prop_foreigners", "waste_amount", "gdp")
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
# Impute data
imputed <- mice(d, method="cart")
d <- complete(imputed)
anyNA(d)
# transform some variables
d <- d %>% mutate(ln_gdp = log(gdp),
sc_land_price = land_price / 1000,
sc_waste_amount = waste_amount / 10000,
year = as.factor(year),
spatial_unit = as.factor(spatial_unit)) %>% as_tibble()
# Visualisation
d %>%
select("d_employed", "unemployment_rate", "sc_land_price",
"prop_foreigners", "sc_waste_amount", "ln_gdp", "hospital_bed") %>%
tidyr::gather(key = "variable", value = "value") %>%
ggplot(aes(x = value, fill = variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~variable, scale = "free") +
labs(x = "", y = "", title = "", subtitle = "") +
theme(legend.position = "none")
# Data pre-processing
col_eng <- c("code_num", "spatial_unit", "year", "employed", "unemployment_rate",
"land_price", "employees_academic_degree", "employees_no_qualification",
"hospital_bed", "prop_foreigners", "waste_amount", "gdp")
# Data pre-processing
col_eng <- c("code_num", "spatial_unit", "year", "employed", "unemployment_rate",
"land_price", "employees_academic_degree", "employees_no_qualification",
"hospital_bed", "prop_foreigners", "waste_amount", "gdp")
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng)
d
hist(d$employed)
d <- d_wide %>%
slice(-1) %>%
select(- Aggregat) %>%
pivot_longer(
cols = - c(Kennziffer, Raumeinheit),
names_to = c(".value", "year"),
names_pattern = "(.+?)\\.?(\\d*)$") %>%
replace(.=="", "0") %>%
setNames(col_eng) %>%
mutate(year = recode(year,
"0" = "2015",
"1" = "2016",
"2" = "2017",
"3" = "2018",
"4" = "2019",
"5" = "2020",
"6" = "2021"),
d_employed = 100 * (log(employed) - log(lag(employed))))%>%
filter(year != "2015")
hist(d$d_employed)
